"""
Django settings for blog_admin project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# 构建项目内的路径：BASE_DIR / '子目录'
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/
# 快速开发设置 - 不适用于生产环境
# 查看部署检查清单：https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 安全警告：在生产环境中保持密钥的机密性！
SECRET_KEY = 'django-insecure-your-secret-key'

# SECURITY WARNING: don't run with debug turned on in production!
# 安全警告：在生产环境中不要开启调试模式！
DEBUG = True

# 允许访问的主机列表，空列表表示只允许localhost访问
ALLOWED_HOSTS = []


# Application definition
# 应用定义
INSTALLED_APPS = [
    'django.contrib.admin',          # 管理后台
    'django.contrib.auth',           # 身份认证
    'django.contrib.contenttypes',   # 内容类型框架
    'django.contrib.sessions',       # 会话框架
    'django.contrib.messages',       # 消息框架
    'django.contrib.staticfiles',    # 静态文件管理
    'rest_framework',                # REST API框架
    'corsheaders',                   # 跨域资源共享
    'blog_api',                      # 博客API应用
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
]

# 中间件配置
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',         # 安全中间件
    'django.contrib.sessions.middleware.SessionMiddleware',  # 会话中间件
    'corsheaders.middleware.CorsMiddleware',                 # CORS中间件
    'django.middleware.common.CommonMiddleware',             # 通用中间件
    'django.middleware.csrf.CsrfViewMiddleware',             # CSRF保护
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 认证中间件
    'django.contrib.messages.middleware.MessageMiddleware',  # 消息中间件
    'django.middleware.clickjacking.XFrameOptionsMiddleware', # 防点击劫持
]

# 根URL配置
ROOT_URLCONF = 'blog_admin.urls'

# 模板配置
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # 模板引擎
        'DIRS': [],                                                    # 额外的模板目录
        'APP_DIRS': True,                                              # 是否在应用中查找模板
        'OPTIONS': {
            'context_processors': [                                    # 上下文处理器
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI应用配置
WSGI_APPLICATION = 'blog_admin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
# 数据库配置
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',    # 数据库引擎：MySQL
        'NAME': 'personal_blog',                 # 数据库名称
        'USER': 'root',                          # 数据库用户名
        'PASSWORD': '272636',                  # 数据库密码
        'HOST': 'localhost',                     # 数据库主机
        'PORT': '3306',                          # 数据库端口
        'OPTIONS': {
            'charset': 'utf8mb4',                # 字符集
            'use_unicode': True,                 # 使用Unicode
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
# 密码验证配置
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',  # 用户属性相似性验证
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',  # 最小长度验证
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',  # 常见密码验证
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',  # 数字密码验证
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# 国际化配置

# 语言代码：简体中文
LANGUAGE_CODE = 'zh-hans'

# 时区：亚洲/上海
TIME_ZONE = 'Asia/Shanghai'

# 是否启用国际化
USE_I18N = True

# 是否启用时区
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
# 静态文件配置（CSS、JavaScript、图片）

# 静态文件URL
STATIC_URL = 'static/'
# 静态文件根目录
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 媒体文件URL
MEDIA_URL = 'media/'
# 媒体文件根目录
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
# 默认主键字段类型
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
# REST框架配置
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',  # 默认分页类
    'PAGE_SIZE': 10,                                                              # 每页记录数
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',                              # 默认权限：已认证
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # JWT认证
        # 'rest_framework.authentication.SessionAuthentication',  # 移除或注释掉
        # 'rest_framework.authentication.BasicAuthentication',    # 移除或注释掉
    ],
}

# JWT设置
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),  # 访问令牌有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # 刷新令牌有效期
    'ROTATE_REFRESH_TOKENS': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# CORS settings
# CORS跨域配置
CSRF_TRUSTED_ORIGINS = ['http://localhost:5173', 'http://127.0.0.1:5173', 'http://localhost:3000', 'http://127.0.0.1:3000']
CORS_ALLOW_ALL_ORIGINS = True  # 开发环境使用
CORS_ALLOW_CREDENTIALS = True
